Microsoft (R) Macro Assembler Version 5.10                  1/24/20 03:20:45
                                                             Page     1-1


				PUBLIC SOUNDPLAY
				
				.Model LARGE 
				.386
 0000				DATA5 SEGMENT PARA 'DATA'
				
 0000  63 68 65 65 72 69	Filename DB 'cheering.wav', 0  
       6E 67 2E 77 61 76	
       00			
 000D  0000			Filehandle DW ?
 = 7310				filesize equ 29456
 000F  7310[			sounddata DB filesize dup(0)   
	   00			
			 ]	
				
 731F  00000000			last_time dd 0
 7323  0000			voc_index dw 0   ;TO KEEP TRACK OF THE PLAYED S
				AMPLES TO KNOW THE NEXT AUDIO SAMPLE TO PLAY 
 7325  00			LOADED DB 0		;FLAG TO NOT LOAD THE S
				OUND FILE MULTIPLE TIMES WHEN THE SOUND FUNCTIO
				N CALLED MULTIPLE TIMES
				
 7326				DATA5 ENDS
				
				
				.Code
				
				;----------------------------------------------
				-----------------------------------------------
				----------------------------
				; THE CONCEPT OF THIS CODE IS ADAPTED FROM: htt
				ps://github.com/leonardo-ono/Assembly8086SBHard
				wareLevelDspProgrammingTest
				; HE USED NASM NOT MASM SO PUTTING THE CODE TOG
				ETHER TO MAKE IT WORK WAS NOT AN EASY TASK
				;----------------------------------------------
				-----------------------------------------------
				-----------------------------
 0000				SOUNDPLAY PROC FAR
				    
					ASSUME DS:DATA5
 0000  B8 ---- R		    MOV AX , DATA5
 0003  8E D8			    MOV DS , AX
 0005  67| C7 05 00007323 R		MOV WORD PTR DS:VOC_INDEX, 0
       0000			
 000E  9A 001C ---- R		    CALL FAR PTR SOUNDS
 0013  67| C6 05 00007325 R		MOV DS:LOADED, 1
       01			
				    ; return control to operating system
 001B  CB			    RETF
				    
 001C				SOUNDPLAY ENDP
				   
				
Microsoft (R) Macro Assembler Version 5.10                  1/24/20 03:20:45
                                                             Page     1-2


 001C				SOUNDS PROC FAR
				
 001C  60				PUSHA 
				
 001D  67| 80 3D 00007325 R		CMP LOADED, 1
       01			
 0025  0F 84 0038 R			JE DONT_LOAD_SOUND
 0029  9A 00B0 ---- R		    CALL FAR PTR OPENFILE  
 002E  9A 00C4 ---- R		    CALL FAR PTR READDATA
 0033  9A 00DA ---- R		    CALL FAR PTR CLOSEFILE
				
 0038					DONT_LOAD_SOUND:
				    
					           
					           
 0038  9A 00F5 ---- R			CALL FAR PTR START_FAST_CLOCK
 003D  9A 0104 ---- R			CALL FAR PTR SB_RESET
				
				
 0042				SB_TURN_ON_SPEAKER:
 0042  B3 D1				MOV BL, 0D1H
 0044  9A 0139 ---- R			CALL FAR PTR SB_WRITE_DSP
				
 0049  67| 66| C7 05 0000		MOV DWORD PTR DS:[last_time], 0
       731F R 00000000		
				
 0055					.NEXT_SAMPLE:
 0055  9A 0152 ---- R				CALL FAR PTR CLRBUFFR ;CLEAR TH
				E KEYBOARD BUFFER JUST IN CASE
						;{DISABLE THE PREVIOUS SAMPLE F
				ROM THE PORT
 005A  B3 10					MOV BL, 10H
 005C  9A 0139 ---- R				CALL FAR PTR SB_WRITE_DSP
						;}
				
 0061					.WAIT:
						;{TO SYNCHRONIZE THE SAMPLE RAT
				E PLAYED WITH CLOCK CYCLES
 0061  9A 0145 ---- R				CALL FAR PTR GET_CURRENT_TIME
 0066  67| 66| 3B 05 0000			CMP EAX, DS:[LAST_TIME]
       731F R			
 006E  76 F1					JBE .WAIT
 0070  67| 66| A3 0000731F R			MOV DS:[LAST_TIME], EAX
						;}
				
						;{GET THE SAMPLE WHOSE TURN HAS
				 COME TO BE PLAYED IN BL
 0077  66| BB 00000000		        MOV EBX, 0
 007D  67| 8B 1D 00007323 R			MOV BX, WORD PTR DS:VOC_INDEX
 0084  67| 8A 9B 0000000F R			MOV BL, BYTE PTR DS:[SOUNDDATA 
				+ EBX]  
 008B  9A 0139 ---- R				CALL FAR PTR SB_WRITE_DSP
						;}
					
Microsoft (R) Macro Assembler Version 5.10                  1/24/20 03:20:45
                                                             Page     1-3


 0090  67| FF 05 00007323 R			INC WORD PTR DS:VOC_INDEX ;INCR
				EMENT THE INDEX OF THE SAMPLES 
 0097  67| 81 3D 00007323 R			CMP WORD PTR DS:VOC_INDEX, FILE
				SIZE ;CHECK IF WE REACHED THE END OF THE FILE
       7310			
 00A0  72 B3					JB .NEXT_SAMPLE;
					
				    
				
 00A2				STOP_PLAYING:
 00A2				SB_TURN_OFF_SPEAKER:
 00A2  B3 D3					MOV BL, 0D3H
 00A4  9A 0139 ---- R				CALL FAR PTR SB_WRITE_DSP
				
					;RETURN THE CLOCK CYCLES TO THE NORMAL 
				SPEED FOR THE REST OF THE GAME 
 00A9  9A 00E6 ---- R		    CALL FAR PTR START_NORMAL_CLOCK
				    
 00AE  61			    POPA
 00AF  CB			    RETF
 00B0				SOUNDS ENDP
				   
				;==============================================
				==========================================
				;  ______ _____ _      ______   _    _         
				 _   _ _____  _      _____ _   _  _____ 
				; |  ____|_   _| |    |  ____| | |  | |   /\   
				| \ | |  __ \| |    |_   _| \ | |/ ____|
				; | |__    | | | |    | |__    | |__| |  /  \  
				|  \| | |  | | |      | | |  \| | |  __ 
				; |  __|   | | | |    |  __|   |  __  | / /\ \ 
				| . ` | |  | | |      | | | . ` | | |_ |
				; | |     _| |_| |____| |____  | |  | |/ ____ \
				| |\  | |__| | |____ _| |_| |\  | |__| |
				; |_|    |_____|______|______| |_|  |_/_/    \_
				\_| \_|_____/|______|_____|_| \_|\_____|
				;
				;==============================================
				===========================================
				
 00B0				OPENFILE PROC FAR
				
 00B0  B4 3D			    MOV AH, 3DH
 00B2  B0 00			    MOV AL, 0 ; READ ONLY
 00B4  67| 8D 15 00000000 R	    LEA DX, FILENAME
 00BB  CD 21			    INT 21H
 00BD  67| A3 0000000D R	    MOV DS:[FILEHANDLE], AX
 00C3  CB			    RETF
				
 00C4				OPENFILE ENDP
				
				
				;----------------------------------------------
				--------------
Microsoft (R) Macro Assembler Version 5.10                  1/24/20 03:20:45
                                                             Page     1-4


				; TO READ THE SOUND FILE DATA AND PUT IT IN THE
				 DATA SEGMENT
				;----------------------------------------------
				--------------
				
				
 00C4				READDATA PROC FAR
				
 00C4  B4 3F			    MOV AH,3FH
 00C6  67| 8B 1D 0000000D R	    MOV BX, DS:[FILEHANDLE]
 00CD  B9 7310			    MOV CX, FILESIZE ; NUMBER OF BYTES TO READ
 00D0  67| 8D 15 0000000F R	    LEA DX, SOUNDDATA
 00D7  CD 21			    INT 21H
 00D9  CB			    RETF
 00DA				READDATA ENDP 
				
				;----------------------------------------------
				----
				; AS THE NAME IMPLIES IT CLOSES THE OPEN FILE :
				D
				;----------------------------------------------
				----
				
 00DA				CLOSEFILE PROC FAR
 00DA  B4 3E				MOV AH, 3EH
 00DC  67| 8B 1D 0000000D R		MOV BX, DS:[FILEHANDLE]
				
 00E3  CD 21				INT 21H
 00E5  CB				RETF
 00E6				CLOSEFILE ENDP 
				
				;==============================================
				===============================================
				================================
				;   _____  ____  _    _ _   _ _____     __  __ 
				         _   _ _____ _____  _    _ _           
				 _______ _____ ____  _   _  _____ 
				;  / ____|/ __ \| |  | | \ | |  __ \   |  \/  |
				   /\   | \ | |_   _|  __ \| |  | | |        /\
				|__   __|_   _/ __ \| \ | |/ ____|
				; | (___ | |  | | |  | |  \| | |  | |  | \  / |
				  /  \  |  \| | | | | |__) | |  | | |       /  
				\  | |    | || |  | |  \| | (___  
				;  \___ \| |  | | |  | | . ` | |  | |  | |\/| |
				 / /\ \ | . ` | | | |  ___/| |  | | |      / /\
				 \ | |    | || |  | | . ` |\___ \ 
				;  ____) | |__| | |__| | |\  | |__| |  | |  | |
				/ ____ \| |\  |_| |_| |    | |__| | |____ / ___
				_ \| |   _| || |__| | |\  |____) |
				; |_____/ \____/ \____/|_| \_|_____/   |_|  |_/
				_/    \_\_| \_|_____|_|     \____/|______/_/   
				 \_\_|  |_____\____/|_| \_|_____/ 
				;
				;==============================================
Microsoft (R) Macro Assembler Version 5.10                  1/24/20 03:20:45
                                                             Page     1-5


				===============================================
				================================
				                                               
				                                               
				                                
				
				;----------------------------------------------
				-------
				; I USE IT TO GET THE CLOCK CYCLES BACK TO THE 
				NORMAL 
				; SPEED FOR THE REST OF THE GAME
				;----------------------------------------------
				-------
 00E6				START_NORMAL_CLOCK PROC FAR
 00E6  FA			    CLI
 00E7  B0 36			    MOV AL, 36H
 00E9  E6 43			    OUT 43H, AL
				   
				
 00EB  B0 40			    MOV AL,  040H; LOW 2AH
 00ED  E6 40			    OUT 40H, AL
 00EF  B0 FC			    MOV AL, 0FCH ; HIGH 01H
 00F1  E6 40			    OUT 40H, AL
 00F3  FB			    STI
 00F4  CB			    RETF 
 00F5				START_NORMAL_CLOCK ENDP 
				
				;----------------------------------------------
				------------------------------
				; ADJUST THE CLOCK SPEED TO THE SAMPLE RATE OF 
				THE SOUND FILE WHICH IS 8000HZ
				;----------------------------------------------
				------------------------------
				
				    
 00F5				START_FAST_CLOCK PROC FAR
 00F5  FA			    CLI
 00F6  B0 36			    MOV AL, 36H
 00F8  E6 43			    OUT 43H, AL
				    
 00FA  B0 90			    MOV AL, 090H 
 00FC  E6 40			    OUT 40H, AL
 00FE  B0 00			    MOV AL, 00H 
 0100  E6 40			    OUT 40H, AL
 0102  FB			    STI
 0103  CB			    RETF 
 0104				START_FAST_CLOCK ENDP			
							
				
 0104				SB_RESET PROC FAR
 0104  BA 0226				MOV DX, 226H
 0107  B0 01				MOV AL, 1
 0109  EE				OUT DX, AL
						
Microsoft (R) Macro Assembler Version 5.10                  1/24/20 03:20:45
                                                             Page     1-6


 010A  B9 0032				MOV CX, 50
 010D					.WAIT_A_LITTLE:
 010D  90					NOP
 010E  E2 FD				LOOP .WAIT_A_LITTLE
				
 0110  BA 0226				MOV DX, 226H
 0113  B0 00				MOV AL, 0
 0115  EE				OUT DX, AL
				
 0116  B9 0000				MOV CX, 0
 0119					.CHECK_READ_DATA_AVAILABLE:
 0119  BA 022E					MOV DX, 22EH
 011C  EC					IN AL, DX
 011D  0A C0					OR AL, AL
 011F  0F 89 0133 R				JNS .NEXT_TRY
						
 0123					.READ_DATA:
 0123  BA 022A					MOV DX, 22AH
 0126  EC					IN AL, DX
 0127  3C AA					CMP AL, 0AAH
 0129  0F 85 0135 R				JNZ .ERROR
 012D					.OK:
 012D  B8 0001					MOV AX,1
 0130  EB 06 90					JMP .END
 0133					.NEXT_TRY:
 0133  E2 E4					LOOP .CHECK_READ_DATA_AVAILABLE
 0135					.ERROR:
 0135  B8 0000					MOV AX, 0
 0138					.END:	
 0138  CB				RETF
 0139				SB_RESET ENDP    
				    
				
				;----------------------------------------------
				-----------------
				; WRITE A SOUND NOTE IN WHICH IS IN BL TO THE P
				ORT TO BE PLAYED 
				;----------------------------------------------
				-----------------
				
				; BL = SEND BYTE DATA
 0139				SB_WRITE_DSP PROC FAR
 0139  BA 022C				MOV DX, 22CH
 013C					.BUSY:
 013C  EC					IN AL, DX
 013D  A8 80					TEST AL, 10000000B
 013F  75 FB					JNZ .BUSY
 0141  8A C3				MOV AL, BL
 0143  EE				OUT DX, AL
 0144  CB				RETF
 0145				SB_WRITE_DSP ENDP
				                  
				;----------------------------------------------
				-----------
Microsoft (R) Macro Assembler Version 5.10                  1/24/20 03:20:45
                                                             Page     1-7


				; GET CURRENT SYSTEM TIME ADN PUT IT IN EAX
				;----------------------------------------------
				-----------
				
 0145				GET_CURRENT_TIME PROC FAR
 0145  06				PUSH ES
 0146  B8 0000				MOV AX, 0
 0149  8E C0				MOV ES, AX
 014B  26: 66| A1 046C			MOV EAX, ES:[46CH]
 0150  07				POP ES
 0151  CB				RETF
 0152				GET_CURRENT_TIME ENDP			
							    
				
				;----------------------------------------------
				-----------------------------------------------
				------------------
				; CLEARS KEYBOARD BUFFER
				; CREDIT: https://www.daniweb.com/programming/s
				oftware-development/threads/77762/how-to-clear-
				keyboard-buffer 
				;----------------------------------------------
				-----------------------------------------------
				------------------
 0152				CLRBUFFR		PROC FAR
 0152  50				PUSH		AX
 0153  06				PUSH		ES
 0154  B8 0000				MOV		AX, 0000H
 0157  8E C0				MOV		ES, AX
 0159  26: C7 06 041A 041E		MOV		ES:[041AH], 041EH
 0160  26: C7 06 041C 041E		MOV		ES:[041CH], 041EH
					; CLEARS KEYBOARD BUFFER
 0167  07				POP		ES
 0168  58				POP		AX
 0169  CB				RETF
 016A				CLRBUFFR		ENDP 
				
				
				    end SOUNDPLAY                           
Microsoft (R) Macro Assembler Version 5.10                  1/24/20 03:20:45
                                                             Symbols-1


Segments and Groups:

                N a m e         	Size	Length	 Align	Combine Class

DATA5  . . . . . . . . . . . . .  	32 Bit	7326	PARA	NONE	'DATA'
DGROUP . . . . . . . . . . . . .  	GROUP
  _DATA  . . . . . . . . . . . .  	16 Bit	0000	WORD	PUBLIC	'DATA'
SPROG_TEXT . . . . . . . . . . .  	16 Bit	016A	WORD	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

CLOSEFILE  . . . . . . . . . . .  	F PROC	00DA	SPROG_TEXT	Length = 000C
CLRBUFFR . . . . . . . . . . . .  	F PROC	0152	SPROG_TEXT	Length = 0018

DONT_LOAD_SOUND  . . . . . . . .  	L NEAR	0038	SPROG_TEXT

FILEHANDLE . . . . . . . . . . .  	L WORD	000D	DATA5
FILENAME . . . . . . . . . . . .  	L BYTE	0000	DATA5
FILESIZE . . . . . . . . . . . .  	NUMBER	7310	

GET_CURRENT_TIME . . . . . . . .  	F PROC	0145	SPROG_TEXT	Length = 000D

LAST_TIME  . . . . . . . . . . .  	L DWORD	731F	DATA5
LOADED . . . . . . . . . . . . .  	L BYTE	7325	DATA5

OPENFILE . . . . . . . . . . . .  	F PROC	00B0	SPROG_TEXT	Length = 0014

READDATA . . . . . . . . . . . .  	F PROC	00C4	SPROG_TEXT	Length = 0016

SB_RESET . . . . . . . . . . . .  	F PROC	0104	SPROG_TEXT	Length = 0035
SB_TURN_OFF_SPEAKER  . . . . . .  	L NEAR	00A2	SPROG_TEXT
SB_TURN_ON_SPEAKER . . . . . . .  	L NEAR	0042	SPROG_TEXT
SB_WRITE_DSP . . . . . . . . . .  	F PROC	0139	SPROG_TEXT	Length = 000C
SOUNDDATA  . . . . . . . . . . .  	L BYTE	000F	DATA5	Length = 7310
SOUNDPLAY  . . . . . . . . . . .  	F PROC	0000	SPROG_TEXT	Global	Length = 001C
SOUNDS . . . . . . . . . . . . .  	F PROC	001C	SPROG_TEXT	Length = 0094
START_FAST_CLOCK . . . . . . . .  	F PROC	00F5	SPROG_TEXT	Length = 000F
START_NORMAL_CLOCK . . . . . . .  	F PROC	00E6	SPROG_TEXT	Length = 000F
STOP_PLAYING . . . . . . . . . .  	L NEAR	00A2	SPROG_TEXT

VOC_INDEX  . . . . . . . . . . .  	L WORD	7323	DATA5

.BUSY  . . . . . . . . . . . . .  	L NEAR	013C	SPROG_TEXT
.CHECK_READ_DATA_AVAILABLE . . .  	L NEAR	0119	SPROG_TEXT
.END . . . . . . . . . . . . . .  	L NEAR	0138	SPROG_TEXT
.ERROR . . . . . . . . . . . . .  	L NEAR	0135	SPROG_TEXT
.NEXT_SAMPLE . . . . . . . . . .  	L NEAR	0055	SPROG_TEXT
.NEXT_TRY  . . . . . . . . . . .  	L NEAR	0133	SPROG_TEXT
.OK  . . . . . . . . . . . . . .  	L NEAR	012D	SPROG_TEXT
.READ_DATA . . . . . . . . . . .  	L NEAR	0123	SPROG_TEXT
.WAIT  . . . . . . . . . . . . .  	L NEAR	0061	SPROG_TEXT
Microsoft (R) Macro Assembler Version 5.10                  1/24/20 03:20:45
                                                             Symbols-2


.WAIT_A_LITTLE . . . . . . . . .  	L NEAR	010D	SPROG_TEXT
@CODE  . . . . . . . . . . . . .  	TEXT  sprog_TEXT		
@CODESIZE  . . . . . . . . . . .  	TEXT  1		
@CPU . . . . . . . . . . . . . .  	TEXT  3343		
@DATASIZE  . . . . . . . . . . .  	TEXT  1		
@FILENAME  . . . . . . . . . . .  	TEXT  sprog		
@VERSION . . . . . . . . . . . .  	TEXT  510		


    283 Source  Lines
    283 Total   Lines
     49 Symbols

  47694 + 447277 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
